#指定开启的工作进程数，建议与CPU线程数一致
worker_processes 4;

#定义全局错误日志文件输出，日志级别详细程度高到低debug,info,notice,warn,error,crit
error_log logs/error.log info;

#指定进程id的存储文件位置
pid logs/nginx.pid;

#一个nginx进程打开的最多文件句柄打开数，建议与服务器ulimit -n配置值一致
worker_rlimit_nofile 65535;

events {
  #multi_accept on;
	#设置复用客户端线程的轮询方法（Nginx高性能的关键），可选select/poll/kqueue（BSD使用）/epoll等，Linux 2.6+建议使用最高效的epoll
	use epoll;

	#指定单个工作进程的最大并发连接数，所有工作进程的连接数之和需小于系统的最大句柄打开数ulimit -n
	#   1.在作为反向代理时，根据经验值，预估最大连接数=worker_processes*worker_connections/4，各系统可参考此公式评估单机Nginx的最大承载并发
	#   2.在作为http服务时，根据经验值，预估最大连接数=worker_processes*worker_connections/2，各系统可参考此公式评估单机Nginx的最大承载并发
	# ulimit -n 配置要配到65535
	# 使用 /nginx_status 接口，可以查看Active connections: n，这个n是超不过worker_connections的配置的
	worker_connections  20480;
}


http {
	#文件类型规范
	include  mime.types;
	
	#默认文件类型
	default_type application/octet-stream;
	
	#日志格式定义，可以在access_log指令中引用
	#常见配置项如下，可按需输出：
	#$remote_addr 与 $http_x_forwarded_for 客户端IP
	#$remote_user 客户端用户名称
	#$time_local 访问时间与时区
	#$request 请求url与http协议
	#$status 用请求状态码，成功是200
	#$body_bytes_sent 发送给客户端文件主体内容大小
	#$http_referer 请求来源页面链接
	#$http_user_agent 客户端浏览器相关信息
	#$upstream_addr 负载到的后端服务器地址
	log_format mainlog '$remote_addr [$time_local] '
                 '$protocol $status $bytes_sent $bytes_received '
                 '$session_time "$upstream_addr" '
                 '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
	
	#设置允许客户端请求的最大的单个文件字节数
	client_max_body_size 20m;
	
	#指定来自客户端请求头的header buffer大小
	#假设client_header_buffer_size的配置为16k，如果(请求行+请求头)的大小如果没超过16k，放行请求；如果(请求行+请求头)的大小如果超过16k，则交给large_client_header_buffers处理
	client_header_buffer_size 16K;
	
	#指定客户端请求中较大的消息头的缓存最大数量和大小，4为个数，32K为大小，则最大缓存量为128K
	#假设large_client_header_buffers的配置为4 32k，则：
	#请求行(request line)的大小不可超过32k，否则返回414错误
	#请求头(request header)的大小不能超过32k，否则返回400错误（实际是494错误，但nginx统一返回400）
	#请求行+请求头的大小不能超过128k(4 * 32k)，否则返回400错误
	#如果你的请求中的header都很大，那么应该尽量使用client_header_buffer_size控制，这样能减少一次内存分配
	#如果你的请求中只有少量请求header很大，那么应该使用large_client_header_buffers，因为这样就仅需在处理大header时才会分配更多的空间，从而减少无谓的内存空间浪费
	large_client_header_buffers 4 32k;
	
	#参数用于开启高效文件传输模式。常见的零拷贝技术，直接将tcp请求数据拷贝到网卡中，
	# sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为on，而对于大文件下载等应用磁盘I/O重负载场景，建议设置为off
	sendfile on;
	
	#设置为on用于防止网络阻塞，必须在sendfile开启模式才有效
	tcp_nopush on; 
	
	# 设置为on用于防止网络阻塞，仅在将连接转变为长连接的时候才被启用
	# tcp_nopush 配置和 tcp_nodelay “互斥”
	tcp_nodelay on; 
	
	# 设置客户端连接保持活动的超时时间，单位秒。在超过这个时间之后，Nginx会关闭该连接，默认值60
	# 使用keepalive必须使用下面两个指令，因为只有http1.1协议才支持keepalive，http1.0是不支持的
	keepalive_timeout 10;

  #在一个tcp连接上，最多执行多少个http请求，默认值100
  keepalive_requests 100;

	#设置客户端请求头读取超时时间，单位秒。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回408Request time out错误
	client_header_timeout 60;
	
	#设置客户端请求主体读取超时时间，单位秒。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回408Request time out错误
	client_body_timeout 60;
	
	#指定数据回传客户端的超时时间。如果超过这个时间数据还未回传完毕，Nginx将会关闭连接
	send_timeout 60;
	
	#开启gzip压缩功能，节省带宽
	gzip on; 
	
	#设置允许压缩的页面最小字节数; 这里表示如果文件小于10个字节，就不用压缩，因为没有意义，本来就很小
	gzip_min_length 10k;

	#设置压缩缓冲区大小，此处设置为16个8K内存作为压缩结果流缓存
	gzip_buffers 16 8k;

	#压缩版本。针对压缩的http版本，默认1.1
	gzip_http_version 1.1;

	#设置压缩比率，取值1到10，级别越高，压缩比就越大，节省了带宽资源，但同时也消耗更多CPU资源
	gzip_comp_level 6;

	#指定压缩的类型，线上配置时尽可能配置多的压缩类型【文本类的有意义，视频图片等不需要解压缩】
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	# 【跟 Squid 等缓存服务有关，一般不需要】
	# 开启后在响应头中会增加Vary: Accept-Encoding，用作告知客户端已启用压缩
	gzip_vary on;

	#配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）
	gzip_disable "MSIE [1-6]\.(?!.*SV1)";

	#无条件压缩所有结果数据【和上面很多配置冲突，一般不需要】
	gzip_proxied any;

	
	#引入子配置，可以减少主配置文件的复杂度
	include server1.conf;
}
