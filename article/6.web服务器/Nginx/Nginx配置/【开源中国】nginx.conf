#user  nobody;
worker_processes  1;# cpu核心数，本机器为单核心(∩_∩)

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024; #最大连接数=连接数*进程数
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log  logs/access.log  main;# 总的配置， 使用时间分割日志

    sendfile        on; #开启高效文件传输模式
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
	
	# 机器性能差，开启gzip压缩后性能急剧下降
    #gzip  on;			 #开启gzip压缩输出
	#gzip_buffers 4 16k;  #表示将数据压缩成4个包，每个包最大16k
	#gzip_comp_level 6;   #这里表示压缩级别，可以是0到9中的任一个，级别越高，压缩就越小，节省了带宽资源，但同时也消耗CPU资源，所以一般折中为6
	#gzip_min_length 200; #这里表示如果文件小于200个字节，就不用压缩，因为没有意义，本来就很小
	
	# 限制IP访问次数
	#定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，
    #以$binary_remote_addr 为key,限制平均每秒的请求为20个，
    #1M能存储16000个状态，rete的值必须为整数，
    #如果限制两秒钟一个请求，可以设置成30r/m
    limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;
	
	server { # 配置禁止使用IP访问站点
		listen 80 default; 
		server_name _;
		return 500; 
	} 
	
	server { # account站点配置
		listen       80;
        server_name  account.zx1989.top;
		access_log  logs/access.log  main;
				
		location = /ip.txt {
            root   html;
        }
				
		location / {  
			proxy_pass http://127.0.0.1:8080/;
			proxy_set_header   Host    $host;  
			proxy_set_header   X-Real-IP   $remote_addr;   
			proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;  
		} 
		error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
		
	}
	
    server { # 主站点配置
        listen       80;
        server_name  www.zx1989.top zx1989.top;

        #charset koi8-r;

        access_log  logs/host.access.log  main;

        location /r{
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
		#代理本地
		#location /account {  
		#	proxy_pass http://127.0.0.1:8080/account;
		#	proxy_set_header   Host    $host;  
		#	proxy_set_header   X-Real-IP   $remote_addr;   
		#	proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;  
		#}  
		#location /blog {  
		#	proxy_pass http://localhost:4000/;
		#	proxy_set_header   Host    $host;  
		#	proxy_set_header   X-Real-IP   $remote_addr;   
		#	proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;  
		#}
		#代理域名
		location / {  
			#add_header Access-Control-Allow-Origin *; 
			#add_header Access-Control-Allow-Credentials true;
			#add_header Access-Control-Allow-Headers    "Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With";
			proxy_pass http://luckSnow.gitee.io/;

			#限制每ip每秒不超过20个请求，漏桶数burst为5
            #brust的意思就是，如果第1秒、2,3,4秒请求为19个，
            #第5秒的请求为25个是被允许的。
            #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。
            #nodelay，如果不设置该选项，严格使用平均速率限制请求数，
            #第1秒25个请求时，5个请求放到第2秒执行，
            #设置nodelay，25个请求将在第1秒执行。
            limit_req zone=allips burst=5 nodelay;
		}
        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
