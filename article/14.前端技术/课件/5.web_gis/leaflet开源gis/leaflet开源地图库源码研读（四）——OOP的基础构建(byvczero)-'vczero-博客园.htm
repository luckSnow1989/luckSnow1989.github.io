<!DOCTYPE html>
<html lang="zh-cn"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>leaflet开源地图库源码研读（四）——OOP的基础构建(by vczero) - 'vczero - 博客园</title>
<link type="text/css" rel="stylesheet" href="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/blog-common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/bundle-ThinkInside.css">
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/vczero/rss">
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/vczero/rsd.xml">
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/vczero/wlwmanifest.xml">
<script src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/encoder.js" type="text/javascript"></script><script src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'vczero', cb_enable_mathjax=false;</script>
<script src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/blog-common.js" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/vczero/"><img id="blogLogo" src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/logo.gif" alt="返回主页"></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/vczero/">vczero</a></h1>
<h2><div>专注于前端 &amp; Node.js</div></h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/vczero/">首页</a></li>
<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://msg.cnblogs.com/send/%26%2339%3Bvczero">联系</a></li>
<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/vczero/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/vczero/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			
<!--done-->
随笔- 34&nbsp;
文章- 0&nbsp;
评论- 159&nbsp;

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/vczero/p/leaflet_4.html">leaflet开源地图库源码研读（四）——OOP的基础构建(by vczero)</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><p><strong><span style="font-family: 'Microsoft YaHei';">一、贴源码</span></strong></p>
<p><span style="font-family: 'Microsoft YaHei';">源码存放的目录是src-&gt;core-&gt;Class.js</span></p>
<p><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/091056105152698.png" alt=""></p>
<div class="cnblogs_code" onclick="cnblogs_code_show('cbc153fd-c7cb-43e3-b99f-229c038adca6')"><img id="code_img_closed_cbc153fd-c7cb-43e3-b99f-229c038adca6" class="code_img_closed" src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/ContractedBlock.gif" alt=""><img id="code_img_opened_cbc153fd-c7cb-43e3-b99f-229c038adca6" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('cbc153fd-c7cb-43e3-b99f-229c038adca6',event)" src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/ExpandedBlockStart.gif" alt="">
<div id="cnblogs_code_open_cbc153fd-c7cb-43e3-b99f-229c038adca6" class="cnblogs_code_hide">
<pre><span style="color: #008080;"> 1</span> L.Class = <span style="color: #0000ff;">function</span><span style="color: #000000;"> () {};
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span> L.Class.extend = <span style="color: #0000ff;">function</span><span style="color: #000000;"> (props) {
</span><span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> extended class with the new prototype</span>
<span style="color: #008080;"> 6</span>     <span style="color: #0000ff;">var</span> NewClass = <span style="color: #0000ff;">function</span><span style="color: #000000;"> () {
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> call the constructor</span>
<span style="color: #008080;"> 9</span>         <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span><span style="color: #000000;">.initialize) {
</span><span style="color: #008080;">10</span>             <span style="color: #0000ff;">this</span>.initialize.apply(<span style="color: #0000ff;">this</span><span style="color: #000000;">, arguments);
</span><span style="color: #008080;">11</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">12</span> 
<span style="color: #008080;">13</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> call all constructor hooks</span>
<span style="color: #008080;">14</span>         <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span><span style="color: #000000;">._initHooks.length) {
</span><span style="color: #008080;">15</span>             <span style="color: #0000ff;">this</span><span style="color: #000000;">.callInitHooks();
</span><span style="color: #008080;">16</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">17</span> <span style="color: #000000;">    };
</span><span style="color: #008080;">18</span> 
<span style="color: #008080;">19</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> jshint camelcase: false</span>
<span style="color: #008080;">20</span>     <span style="color: #0000ff;">var</span> parentProto = NewClass.__super__ = <span style="color: #0000ff;">this</span><span style="color: #000000;">.prototype;
</span><span style="color: #008080;">21</span> 
<span style="color: #008080;">22</span>     <span style="color: #0000ff;">var</span> proto =<span style="color: #000000;"> L.Util.create(parentProto);
</span><span style="color: #008080;">23</span>     proto.constructor =<span style="color: #000000;"> NewClass;
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>     NewClass.prototype =<span style="color: #000000;"> proto;
</span><span style="color: #008080;">26</span> 
<span style="color: #008080;">27</span>     <span style="color: #008000;">//</span><span style="color: #008000;">inherit parent's statics</span>
<span style="color: #008080;">28</span>     <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> i <span style="color: #0000ff;">in</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">) {
</span><span style="color: #008080;">29</span>         <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.hasOwnProperty(i) &amp;&amp; i !== 'prototype'<span style="color: #000000;">) {
</span><span style="color: #008080;">30</span>             NewClass[i] = <span style="color: #0000ff;">this</span><span style="color: #000000;">[i];
</span><span style="color: #008080;">31</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">32</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">33</span> 
<span style="color: #008080;">34</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> mix static properties into the class</span>
<span style="color: #008080;">35</span>     <span style="color: #0000ff;">if</span><span style="color: #000000;"> (props.statics) {
</span><span style="color: #008080;">36</span> <span style="color: #000000;">        L.extend(NewClass, props.statics);
</span><span style="color: #008080;">37</span>         <span style="color: #0000ff;">delete</span><span style="color: #000000;"> props.statics;
</span><span style="color: #008080;">38</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">39</span> 
<span style="color: #008080;">40</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> mix includes into the prototype</span>
<span style="color: #008080;">41</span>     <span style="color: #0000ff;">if</span><span style="color: #000000;"> (props.includes) {
</span><span style="color: #008080;">42</span>         L.Util.extend.apply(<span style="color: #0000ff;">null</span><span style="color: #000000;">, [proto].concat(props.includes));
</span><span style="color: #008080;">43</span>         <span style="color: #0000ff;">delete</span><span style="color: #000000;"> props.includes;
</span><span style="color: #008080;">44</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">45</span> 
<span style="color: #008080;">46</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> merge options</span>
<span style="color: #008080;">47</span>     <span style="color: #0000ff;">if</span><span style="color: #000000;"> (proto.options) {
</span><span style="color: #008080;">48</span>         props.options =<span style="color: #000000;"> L.Util.extend(L.Util.create(proto.options), props.options);
</span><span style="color: #008080;">49</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">50</span> 
<span style="color: #008080;">51</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> mix given properties into the prototype</span>
<span style="color: #008080;">52</span> <span style="color: #000000;">    L.extend(proto, props);
</span><span style="color: #008080;">53</span> 
<span style="color: #008080;">54</span>     proto._initHooks =<span style="color: #000000;"> [];
</span><span style="color: #008080;">55</span> 
<span style="color: #008080;">56</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> add method for calling all hooks</span>
<span style="color: #008080;">57</span>     proto.callInitHooks = <span style="color: #0000ff;">function</span><span style="color: #000000;"> () {
</span><span style="color: #008080;">58</span> 
<span style="color: #008080;">59</span>         <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>._initHooksCalled) { <span style="color: #0000ff;">return</span><span style="color: #000000;">; }
</span><span style="color: #008080;">60</span> 
<span style="color: #008080;">61</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;"> (parentProto.callInitHooks) {
</span><span style="color: #008080;">62</span>             parentProto.callInitHooks.call(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">63</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">64</span> 
<span style="color: #008080;">65</span>         <span style="color: #0000ff;">this</span>._initHooksCalled = <span style="color: #0000ff;">true</span><span style="color: #000000;">;
</span><span style="color: #008080;">66</span> 
<span style="color: #008080;">67</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> i = 0, len = proto._initHooks.length; i &lt; len; i++<span style="color: #000000;">) {
</span><span style="color: #008080;">68</span>             proto._initHooks[i].call(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">69</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">70</span> <span style="color: #000000;">    };
</span><span style="color: #008080;">71</span> 
<span style="color: #008080;">72</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> NewClass;
</span><span style="color: #008080;">73</span> <span style="color: #000000;">};
</span><span style="color: #008080;">74</span> 
<span style="color: #008080;">75</span> 
<span style="color: #008080;">76</span> <span style="color: #008000;">//</span><span style="color: #008000;"> method for adding properties to prototype</span>
<span style="color: #008080;">77</span> L.Class.include = <span style="color: #0000ff;">function</span><span style="color: #000000;"> (props) {
</span><span style="color: #008080;">78</span>     L.extend(<span style="color: #0000ff;">this</span><span style="color: #000000;">.prototype, props);
</span><span style="color: #008080;">79</span> <span style="color: #000000;">};
</span><span style="color: #008080;">80</span> 
<span style="color: #008080;">81</span> <span style="color: #008000;">//</span><span style="color: #008000;"> merge new default options to the Class</span>
<span style="color: #008080;">82</span> L.Class.mergeOptions = <span style="color: #0000ff;">function</span><span style="color: #000000;"> (options) {
</span><span style="color: #008080;">83</span>     L.extend(<span style="color: #0000ff;">this</span><span style="color: #000000;">.prototype.options, options);
</span><span style="color: #008080;">84</span> <span style="color: #000000;">};
</span><span style="color: #008080;">85</span> 
<span style="color: #008080;">86</span> <span style="color: #008000;">//</span><span style="color: #008000;"> add a constructor hook</span>
<span style="color: #008080;">87</span> L.Class.addInitHook = <span style="color: #0000ff;">function</span> (fn) { <span style="color: #008000;">//</span><span style="color: #008000;"> (Function) || (String, args...)</span>
<span style="color: #008080;">88</span>     <span style="color: #0000ff;">var</span> args = Array.prototype.slice.call(arguments, 1<span style="color: #000000;">);
</span><span style="color: #008080;">89</span> 
<span style="color: #008080;">90</span>     <span style="color: #0000ff;">var</span> init = <span style="color: #0000ff;">typeof</span> fn === 'function' ? fn : <span style="color: #0000ff;">function</span><span style="color: #000000;"> () {
</span><span style="color: #008080;">91</span>         <span style="color: #0000ff;">this</span>[fn].apply(<span style="color: #0000ff;">this</span><span style="color: #000000;">, args);
</span><span style="color: #008080;">92</span> <span style="color: #000000;">    };
</span><span style="color: #008080;">93</span> 
<span style="color: #008080;">94</span>     <span style="color: #0000ff;">this</span>.prototype._initHooks = <span style="color: #0000ff;">this</span>.prototype._initHooks ||<span style="color: #000000;"> [];
</span><span style="color: #008080;">95</span>     <span style="color: #0000ff;">this</span><span style="color: #000000;">.prototype._initHooks.push(init);
</span><span style="color: #008080;">96</span> };</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><strong><span style="font-family: 'Microsoft YaHei';">二、代码分析</span></strong></p>
<p><span style="font-family: 'Microsoft YaHei'; color: #333300;">（1）在L的命名空间下，定义Class对象，以构造函数的形式给出。</span>&nbsp;</p>
<div class="cnblogs_code">
<pre>L.Class = <span style="color: #0000ff;">function</span> () {};</pre>
</div>
<p>&nbsp;<span style="font-family: 'Microsoft YaHei'; color: #333300;">（2）分别给Class对象添加静态方法extend 、include、mergeOptions、addInitHook。</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">var</span> L =<span style="color: #000000;"> {};
</span><span style="color: #008080;"> 2</span> L.Class = <span style="color: #0000ff;">function</span><span style="color: #000000;">(){};
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span> 
<span style="color: #008080;"> 5</span> <span style="color: #008000;">/*</span>
<span style="color: #008080;"> 6</span> <span style="color: #008000;">* 作用：扩展该类的prototype，继承父类的静态函数、静态属性等
</span><span style="color: #008080;"> 7</span> <span style="color: #008000;">*
</span><span style="color: #008080;"> 8</span> <span style="color: #008000;">* </span><span style="color: #008000;">*/</span>
<span style="color: #008080;"> 9</span> L.Class.extend = <span style="color: #0000ff;">function</span><span style="color: #000000;">(props){};
</span><span style="color: #008080;">10</span> <span style="color: #008000;">/*</span>
<span style="color: #008080;">11</span> <span style="color: #008000;"> * 作用：添加属性到原型
</span><span style="color: #008080;">12</span> <span style="color: #008000;"> * </span><span style="color: #008000;">*/</span>
<span style="color: #008080;">13</span> L.Class.include = <span style="color: #0000ff;">function</span><span style="color: #000000;"> (props) {};
</span><span style="color: #008080;">14</span> <span style="color: #008000;">/*</span>
<span style="color: #008080;">15</span> <span style="color: #008000;"> * 作用：合并默认的options到Class
</span><span style="color: #008080;">16</span> <span style="color: #008000;"> * </span><span style="color: #008000;">*/</span>
<span style="color: #008080;">17</span> L.Class.mergeOptions = <span style="color: #0000ff;">function</span><span style="color: #000000;"> (options) {};
</span><span style="color: #008080;">18</span> <span style="color: #008000;">/*</span>
<span style="color: #008080;">19</span> <span style="color: #008000;"> * 作用：添加一个构造函数的钩子
</span><span style="color: #008080;">20</span> <span style="color: #008000;"> * </span><span style="color: #008000;">*/</span>
<span style="color: #008080;">21</span> L.Class.addInitHook = <span style="color: #0000ff;">function</span> (fn){};</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="font-family: 'Microsoft YaHei';">（3）分析L.Class.extend函数</span></p>
<p><span style="font-family: 'Microsoft YaHei';">贴上L.Class.extend函数的源码：</span></p>
<div class="cnblogs_code" onclick="cnblogs_code_show('383c3b32-7134-465a-8519-4625579041b7')"><img id="code_img_closed_383c3b32-7134-465a-8519-4625579041b7" class="code_img_closed" src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/ContractedBlock.gif" alt=""><img id="code_img_opened_383c3b32-7134-465a-8519-4625579041b7" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('383c3b32-7134-465a-8519-4625579041b7',event)" src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/ExpandedBlockStart.gif" alt="">
<div id="cnblogs_code_open_383c3b32-7134-465a-8519-4625579041b7" class="cnblogs_code_hide">
<pre><span style="color: #008080;"> 1</span> L.Class.extend = <span style="color: #0000ff;">function</span><span style="color: #000000;"> (props) {
</span><span style="color: #008080;"> 2</span> 
<span style="color: #008080;"> 3</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> extended class with the new prototype</span>
<span style="color: #008080;"> 4</span>     <span style="color: #0000ff;">var</span> NewClass = <span style="color: #0000ff;">function</span><span style="color: #000000;"> () {
</span><span style="color: #008080;"> 5</span> 
<span style="color: #008080;"> 6</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> call the constructor</span>
<span style="color: #008080;"> 7</span>         <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span><span style="color: #000000;">.initialize) {
</span><span style="color: #008080;"> 8</span>             <span style="color: #0000ff;">this</span>.initialize.apply(<span style="color: #0000ff;">this</span><span style="color: #000000;">, arguments);
</span><span style="color: #008080;"> 9</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">10</span> 
<span style="color: #008080;">11</span>         <span style="color: #008000;">//</span><span style="color: #008000;"> call all constructor hooks</span>
<span style="color: #008080;">12</span>         <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span><span style="color: #000000;">._initHooks.length) {
</span><span style="color: #008080;">13</span>             <span style="color: #0000ff;">this</span><span style="color: #000000;">.callInitHooks();
</span><span style="color: #008080;">14</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">15</span> <span style="color: #000000;">    };
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> jshint camelcase: false</span>
<span style="color: #008080;">18</span>     <span style="color: #0000ff;">var</span> parentProto = NewClass.__super__ = <span style="color: #0000ff;">this</span><span style="color: #000000;">.prototype;
</span><span style="color: #008080;">19</span> 
<span style="color: #008080;">20</span>     <span style="color: #0000ff;">var</span> proto =<span style="color: #000000;"> L.Util.create(parentProto);
</span><span style="color: #008080;">21</span>     proto.constructor =<span style="color: #000000;"> NewClass;
</span><span style="color: #008080;">22</span> 
<span style="color: #008080;">23</span>     NewClass.prototype =<span style="color: #000000;"> proto;
</span><span style="color: #008080;">24</span> 
<span style="color: #008080;">25</span>     <span style="color: #008000;">//</span><span style="color: #008000;">inherit parent's statics</span>
<span style="color: #008080;">26</span>     <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> i <span style="color: #0000ff;">in</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">) {
</span><span style="color: #008080;">27</span>         <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.hasOwnProperty(i) &amp;&amp; i !== 'prototype'<span style="color: #000000;">) {
</span><span style="color: #008080;">28</span>             NewClass[i] = <span style="color: #0000ff;">this</span><span style="color: #000000;">[i];
</span><span style="color: #008080;">29</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">30</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">31</span> 
<span style="color: #008080;">32</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> mix static properties into the class</span>
<span style="color: #008080;">33</span>     <span style="color: #0000ff;">if</span><span style="color: #000000;"> (props.statics) {
</span><span style="color: #008080;">34</span> <span style="color: #000000;">        L.extend(NewClass, props.statics);
</span><span style="color: #008080;">35</span>         <span style="color: #0000ff;">delete</span><span style="color: #000000;"> props.statics;
</span><span style="color: #008080;">36</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">37</span> 
<span style="color: #008080;">38</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> mix includes into the prototype</span>
<span style="color: #008080;">39</span>     <span style="color: #0000ff;">if</span><span style="color: #000000;"> (props.includes) {
</span><span style="color: #008080;">40</span>         L.Util.extend.apply(<span style="color: #0000ff;">null</span><span style="color: #000000;">, [proto].concat(props.includes));
</span><span style="color: #008080;">41</span>         <span style="color: #0000ff;">delete</span><span style="color: #000000;"> props.includes;
</span><span style="color: #008080;">42</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">43</span> 
<span style="color: #008080;">44</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> merge options</span>
<span style="color: #008080;">45</span>     <span style="color: #0000ff;">if</span><span style="color: #000000;"> (proto.options) {
</span><span style="color: #008080;">46</span>         props.options =<span style="color: #000000;"> L.Util.extend(L.Util.create(proto.options), props.options);
</span><span style="color: #008080;">47</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">48</span> 
<span style="color: #008080;">49</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> mix given properties into the prototype</span>
<span style="color: #008080;">50</span> <span style="color: #000000;">    L.extend(proto, props);
</span><span style="color: #008080;">51</span> 
<span style="color: #008080;">52</span>     proto._initHooks =<span style="color: #000000;"> [];
</span><span style="color: #008080;">53</span> 
<span style="color: #008080;">54</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> add method for calling all hooks</span>
<span style="color: #008080;">55</span>     proto.callInitHooks = <span style="color: #0000ff;">function</span><span style="color: #000000;"> () {
</span><span style="color: #008080;">56</span> 
<span style="color: #008080;">57</span>         <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>._initHooksCalled) { <span style="color: #0000ff;">return</span><span style="color: #000000;">; }
</span><span style="color: #008080;">58</span> 
<span style="color: #008080;">59</span>         <span style="color: #0000ff;">if</span><span style="color: #000000;"> (parentProto.callInitHooks) {
</span><span style="color: #008080;">60</span>             parentProto.callInitHooks.call(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">61</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">62</span> 
<span style="color: #008080;">63</span>         <span style="color: #0000ff;">this</span>._initHooksCalled = <span style="color: #0000ff;">true</span><span style="color: #000000;">;
</span><span style="color: #008080;">64</span> 
<span style="color: #008080;">65</span>         <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> i = 0, len = proto._initHooks.length; i &lt; len; i++<span style="color: #000000;">) {
</span><span style="color: #008080;">66</span>             proto._initHooks[i].call(<span style="color: #0000ff;">this</span><span style="color: #000000;">);
</span><span style="color: #008080;">67</span> <span style="color: #000000;">        }
</span><span style="color: #008080;">68</span> <span style="color: #000000;">    };
</span><span style="color: #008080;">69</span> 
<span style="color: #008080;">70</span>     <span style="color: #0000ff;">return</span><span style="color: #000000;"> NewClass;
</span><span style="color: #008080;">71</span> };</pre>
</div>
<span class="cnblogs_code_collapse">View Code</span></div>
<p><span style="font-family: 'Microsoft YaHei';">现在，来看NewClass对象，NewClass对象就是创建一个新的内部对象，所有父类的属性和方法都基于此方法。</span>this.initialize<span style="font-family: 'Microsoft YaHei';">就是构造函数。</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008080;"> 1</span> <span style="color: #008000;">//</span><span style="color: #008000;"> extended class with the new prototype</span>
<span style="color: #008080;"> 2</span> <span style="color: #0000ff;">var</span> NewClass = <span style="color: #0000ff;">function</span><span style="color: #000000;"> () {
</span><span style="color: #008080;"> 3</span> 
<span style="color: #008080;"> 4</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> call the constructor</span>
<span style="color: #008080;"> 5</span>     <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span><span style="color: #000000;">.initialize) {
</span><span style="color: #008080;"> 6</span>         <span style="color: #0000ff;">this</span>.initialize.apply(<span style="color: #0000ff;">this</span><span style="color: #000000;">, arguments);
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">    }
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>     <span style="color: #008000;">//</span><span style="color: #008000;"> call all constructor hooks</span>
<span style="color: #008080;">10</span>     <span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span><span style="color: #000000;">._initHooks.length) {
</span><span style="color: #008080;">11</span>         <span style="color: #0000ff;">this</span><span style="color: #000000;">.callInitHooks();
</span><span style="color: #008080;">12</span> <span style="color: #000000;">    }
</span><span style="color: #008080;">13</span> };</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="font-family: 'Microsoft YaHei';">&nbsp;var parentProto = NewClass.__super__ = this.prototype; 将原型赋给NewClass的_super_属性，并赋值给parentProto。</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> proto =<span style="color: #000000;"> L.Util.create(parentProto); //在LeafLet中有个Util.js，该工具类的方法的create方法的作用是：基于给定原型构建对象
proto.constructor </span>=<span style="color: #000000;"> NewClass; //对象proto的构造函数指向NewClass

NewClass.prototype </span>= proto; //NewClass的原型指向proto，这个大家可以看看原型链的继承方式</pre>
</div>
<p><span style="font-family: 'Microsoft YaHei';">附：L.Util.create代码：</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008000;">//</span><span style="color: #008000;"> create an object from a given prototype</span>
    create: Object.create || (<span style="color: #0000ff;">function</span><span style="color: #000000;"> () {
        </span><span style="color: #0000ff;">function</span><span style="color: #000000;"> F() {}
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">function</span><span style="color: #000000;"> (proto) {
            F.prototype </span>=<span style="color: #000000;"> proto;
            </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span><span style="color: #000000;"> F();
        };
    })()</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="font-family: 'Microsoft YaHei';">接着往下看：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;">inherit parent's statics</span>
    <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> i <span style="color: #0000ff;">in</span> <span style="color: #0000ff;">this</span><span style="color: #000000;">) {
        </span><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>.hasOwnProperty(i) &amp;&amp; i !== 'prototype'<span style="color: #000000;">) { //继承父类的静态属性和方法，hasOwnProperty只会遍历自定义属性和方法，不会遍历原型
            NewClass[i] </span>= <span style="color: #0000ff;">this</span><span style="color: #000000;">[i];
        }
    }</span></pre>
</div>
<p><span style="font-family: 'Microsoft YaHei';">再接着往下看：</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008000;">//</span><span style="color: #008000;"> mix static properties into the class</span>
    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (props.statics) {
        L.extend(NewClass, props.statics); //L.extend == L.Util.extend，在Util.js中便可找到，作用是扩展属性，这里是将props.statics的属性给了NewClass
        </span><span style="color: #0000ff;">delete</span><span style="color: #000000;"> props.statics; //删除该属性
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> mix includes into the prototype</span>
    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (props.includes) {
        L.Util.extend.apply(</span><span style="color: #0000ff;">null</span><span style="color: #000000;">, [proto].concat(props.includes)); //apply这里巧妙的使用了null, 主要是为了使用extend的功能，将includes和proto的原型结合，连接成一个数组。
        </span><span style="color: #0000ff;">delete</span><span style="color: #000000;"> props.includes; //删除该属性
    }</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="font-family: 'Microsoft YaHei';">附：L.Util.extend源码</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre>extend: <span style="color: #0000ff;">function</span><span style="color: #000000;"> (dest) {
        </span><span style="color: #0000ff;">var</span><span style="color: #000000;"> i, j, len, src;

        </span><span style="color: #0000ff;">for</span> (j = 1, len = arguments.length; j &lt; len; j++<span style="color: #000000;">) {
            src </span>=<span style="color: #000000;"> arguments[j];
            </span><span style="color: #0000ff;">for</span> (i <span style="color: #0000ff;">in</span><span style="color: #000000;"> src) {
                dest[i] </span>=<span style="color: #000000;"> src[i];
            }
        }
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> dest;
    },</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="font-family: 'Microsoft YaHei';">接着往下看：</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008000;">//</span><span style="color: #008000;"> merge options</span>
    <span style="color: #0000ff;">if</span><span style="color: #000000;"> (proto.options) {
        props.options </span>=<span style="color: #000000;"> L.Util.extend(L.Util.create(proto.options), props.options); //将options属性合并
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> mix given properties into the prototype</span>
<span style="color: #000000;">    L.extend(proto, props); //将props的扩展属性，包括原型给proto

    proto._initHooks </span>= [];  //初始化空的钩子数组</pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="font-family: 'Microsoft YaHei';">接着往下看：</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008000;">//</span><span style="color: #008000;"> add method for calling all hooks<br>// 增加一个方法，调用所有的钩子</span>
    proto.callInitHooks = <span style="color: #0000ff;">function</span><span style="color: #000000;"> () {
        </span><span style="color: #0000ff;">if</span> (<span style="color: #0000ff;">this</span>._initHooksCalled) { <span style="color: #0000ff;">return</span><span style="color: #000000;">; } //如果已经调用，直接return
        </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (parentProto.callInitHooks) { //如果父类的原型中存在callInitHooks，则调用父类的callInitHooks
            parentProto.callInitHooks.call(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">);
        }
        </span><span style="color: #0000ff;">this</span>._initHooksCalled = <span style="color: #0000ff;">true</span><span style="color: #000000;">; //设置调用后状态
        </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> i = 0, len = proto._initHooks.length; i &lt; len; i++<span style="color: #000000;">) {
            proto._initHooks[i].call(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">); //调用钩子的数组中的方法
        }
    };</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="font-family: 'Microsoft YaHei';">最后一步了，返回对象：</span></p>
<p><span style="font-family: 'Microsoft YaHei';">return NewClass;</span></p>
<p><span style="font-family: 'Microsoft YaHei';">（4）include:</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;"> method for adding properties to prototype</span>
L.Class.include = <span style="color: #0000ff;">function</span><span style="color: #000000;"> (props) {
    L.extend(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">.prototype, props);
};</span></pre>
</div>
<p><span style="font-family: 'Microsoft YaHei';">（5）mergeOptions：</span></p>
<div class="cnblogs_code">
<pre><span style="color: #008000;">//</span><span style="color: #008000;"> merge new default options to the Class</span>
L.Class.mergeOptions = <span style="color: #0000ff;">function</span><span style="color: #000000;"> (options) {
    L.extend(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">.prototype.options, options);
};</span></pre>
</div>
<p><span style="font-family: 'Microsoft YaHei';">（6）addInitHook：</span></p>
<div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div>
<pre><span style="color: #008000;">//</span><span style="color: #008000;"> add a constructor hook</span>
L.Class.addInitHook = <span style="color: #0000ff;">function</span> (fn) { <span style="color: #008000;">//</span><span style="color: #008000;"> (Function) || (String, args...)</span>
    <span style="color: #0000ff;">var</span> args = Array.prototype.slice.call(arguments, 1<span style="color: #000000;">);

    </span><span style="color: #0000ff;">var</span> init = <span style="color: #0000ff;">typeof</span> fn === 'function' ? fn : <span style="color: #0000ff;">function</span><span style="color: #000000;"> () {
        </span><span style="color: #0000ff;">this</span>[fn].apply(<span style="color: #0000ff;">this</span><span style="color: #000000;">, args);
    };

    </span><span style="color: #0000ff;">this</span>.prototype._initHooks = <span style="color: #0000ff;">this</span>.prototype._initHooks ||<span style="color: #000000;"> [];
    </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.prototype._initHooks.push(init);
};</span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/copycode.gif" alt="复制代码"></a></span></div></div>
<p><span style="font-family: 'Microsoft YaHei';">三、用图来理理extend函数</span></p>
<p><span style="font-family: 'Microsoft YaHei';"><img style="width: 972px;" src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/091558363907665.png" alt="" height="441" width="1189"></span></p>
<p>&nbsp;</p>
<p><a href="http://www.cnblogs.com/vczero/p/leaflet_3.html" target="_blank">上一篇：Leaflet开源地图库源码研读（三）——浏览器&amp;移动设备判断（browser.js）(by vczero)</a></p>
<p>&nbsp;</p></div><div style="display: block;" id="MySignature">——by vczero 前端工程如此浩大，孜孜不倦，孜孜不倦（专注web框架和架构，擅长JS &amp; Node.js）</div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory">分类: <a href="http://www.cnblogs.com/vczero/category/601318.html">JavaScript</a></div>
<div id="EntryTag">标签: <a href="http://www.cnblogs.com/vczero/tag/oop/">oop</a>, <a href="http://www.cnblogs.com/vczero/tag/leaflet%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/">leaflet源码解读</a>, <a href="http://www.cnblogs.com/vczero/tag/leaflet%E5%BC%80%E6%BA%90/">leaflet开源</a>, <a href="http://www.cnblogs.com/vczero/tag/leaflet%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/">leaflet面向对象</a>, <a href="http://www.cnblogs.com/vczero/tag/js%20%E7%BB%A7%E6%89%BF/">js 继承</a></div>
<div id="blog_post_info"><div id="green_channel">
<a href="javascript:void(0);" id="green_channel_digg" onclick="DiggIt(4012913,cb_blogId,1);green_channel_success(this,'谢谢推荐！');">好文要顶</a>
<a id="green_channel_follow" onclick="c_follow();" href="javascript:void(0);">关注我</a>
<a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a><a id="green_channel_contact" href="http://msg.cnblogs.com/send/%26%2339%3Bvczero" target="_blank">联系我</a>
<a id="green_channel_weibo" href="javascript:void(0);" title="分享至新浪微博" onclick="ShareToTsina()"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/icon_weibo_24.png" alt=""></a>
<a id="green_channel_wechat" href="javascript:void(0);" title="分享至微信" onclick="shareOnWechat()"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/wechat.png" alt=""></a>
</div>
<div id="author_profile">
<div id="author_profile_info" class="author_profile_info">
<a href="http://home.cnblogs.com/u/vczero/" target="_blank"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/20150110132206.png" class="author_avatar" alt=""></a>
<div id="author_profile_detail" class="author_profile_info">
<a href="http://home.cnblogs.com/u/vczero/">'vczero</a><br>
<a href="http://home.cnblogs.com/u/vczero/followees">关注 - 7</a><br>
<a href="http://home.cnblogs.com/u/vczero/followers">粉丝 - 152</a>
</div>
</div>
<div class="clear"></div>
<div id="author_profile_honor"></div>
<div id="author_profile_follow">
    <a href="javascript:void(0);" onclick="c_follow();return false;">+加关注</a>
</div>
</div>
<div id="div_digg">										
    <div class="diggit" onclick="votePost(4012913,'Digg')">
        <span class="diggnum" id="digg_count">1</span>
    </div>
	<div class="buryit" onclick="votePost(4012913,'Bury')"> 
		<span class="burynum" id="bury_count">0</span>
	</div>
	<div class="clear"></div>	
	<div class="diggword" id="digg_tips">
    (请您对文章做出评价)
    </div>	
</div>
</div>
<div class="clear"></div>
<div id="post_next_prev"><a href="http://www.cnblogs.com/vczero/p/grunt_1.html" class="p_n_p_prefix">« </a> 上一篇：<a href="http://www.cnblogs.com/vczero/p/grunt_1.html" title="发布于2014-10-08 21:07">Grunt javascript世界的构建工具（一）——Grunt使用入门 (by vczero)</a><br><a href="http://www.cnblogs.com/vczero/p/grunt_2.html" class="p_n_p_prefix">» </a> 下一篇：<a href="http://www.cnblogs.com/vczero/p/grunt_2.html" title="发布于2014-10-12 00:02">Grunt javascript世界的构建工具（二）——Grunt项目实战 (by vczero)</a><br></div>
</div>


		</div>
		<div class="postDesc">posted @ <span id="post-date">2014-10-09 16:01</span> <a href="http://www.cnblogs.com/vczero/">'vczero</a> 阅读(<span id="post_view_count">669</span>) 评论(<span id="post_comment_count">0</span>)  <a href="http://i.cnblogs.com/EditPosts.aspx?postid=4012913" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(4012913);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=193895,cb_entryId=4012913,cb_blogApp=currentBlogApp,cb_blogUserGuid='cd28f27c-471c-e411-8d02-90b11c0b17d6',cb_entryCreatedDate='2014/10/9 16:01:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"><div class="login_tips">注册用户登录后才能发表评论，请 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return login('commentform');">登录</a> 或 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return register();">注册</a>，<a href="http://www.cnblogs.com/">访问</a>网站首页。</div></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.ucancode.com/index.htm" target="_blank">【推荐】50万行VC++源码: 大型组态工控、电力仿真CAD与GIS源码库</a><br><a href="http://www.rongcloud.cn/" target="_blank">【推荐】融云即时通讯云－专注为 App 开发者提供IM云服务</a><br><a href="https://www.jpush.cn/" target="_blank">【福利】极光推送-富媒体+大数据驱动精准推送，完全免费开放啦</a><br><a href="http://click.aliyun.com/m/994/" target="_blank">【精品】根据网站PV推荐完整架构方案</a><br></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    fixPostBodyFormat();
</script>
<div id="google_ad_c1" class="c_ad_block"><a href="http://www.gcpowertools.com.cn/order/specialoffers.htm?utm_source=cnblogs&amp;utm_medium=blogpage&amp;utm_term=bottom&amp;utm_content=promotion&amp;utm_campaign=community" target="_blank"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/24442-20151110205559353-1320016985.png" alt="" title="" height="250" width="300"></a></div>
<div id="under_post_news"><div class="itnews c_ad_block"><b>最新IT新闻</b>:<br> ·  <a href="http://news.cnblogs.com/n/533921/" target="_blank">科学家发现地球或拥有超长的暗物质毛发</a><br> ·  <a href="http://news.cnblogs.com/n/533919/" target="_blank">小扎捐99%股权不意味目前减持 继续控制投票权</a><br> ·  <a href="http://news.cnblogs.com/n/533918/" target="_blank">网购火车票双向核验 网友吐槽收不到验证码</a><br> ·  <a href="http://news.cnblogs.com/n/533876/" target="_blank">打造工程师文化可以做的十件事</a><br> ·  <a href="http://news.cnblogs.com/n/533879/" target="_blank">YouTube收购之后是如何扩张的？</a><br>» <a href="http://news.cnblogs.com/" title="IT新闻" target="_blank">更多新闻...</a></div></div>
<div id="google_ad_c2" class="c_ad_block"><a href="http://e.jikexueyuan.com/html5.html?hmsr=cnb_banner_html5_09.14" target="_blank"><img src="leaflet%E5%BC%80%E6%BA%90%E5%9C%B0%E5%9B%BE%E5%BA%93%E6%BA%90%E7%A0%81%E7%A0%94%E8%AF%BB%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94OOP%E7%9A%84%E5%9F%BA%E7%A1%80%E6%9E%84%E5%BB%BA%28by%20vczero%29%20-%20%27vczero%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/24442-20150914101329570-406117032.jpg" alt="" title="" height="60" width="468"></a></div>
<div id="under_post_kb"><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章</b>:<br><div id="kb_recent"> ·  <a href="http://kb.cnblogs.com/page/527814/" target="_blank">从涂鸦到发布——理解API的设计过程</a><br> ·  <a href="http://kb.cnblogs.com/page/531834/" target="_blank">好的架构是进化来的，不是设计来的</a><br> ·  <a href="http://kb.cnblogs.com/page/532236/" target="_blank">被误解的MVC和被神化的MVVM</a><br> ·  <a href="http://kb.cnblogs.com/page/530046/" target="_blank">再谈设计和编码</a><br> ·  <a href="http://kb.cnblogs.com/page/531270/" target="_blank">什么时候应该避免写代码注释？</a><br></div>» <a href="http://kb.cnblogs.com/" target="_blank">更多知识库文章...</a></div></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"><div id="profile_block">昵称：<a href="http://home.cnblogs.com/u/vczero/">'vczero</a><br>园龄：<a href="http://home.cnblogs.com/u/vczero/" title="入园时间：2014-08-05">1年3个月</a><br>粉丝：<a href="http://home.cnblogs.com/u/vczero/followers/">152</a><br>关注：<a href="http://home.cnblogs.com/u/vczero/followees/">7</a><div id="p_b_follow"><a href="javascript:void(0);" onclick="cnblogs.UserManager.FollowBlogger('cd28f27c-471c-e411-8d02-90b11c0b17d6')">+加关注</a></div></div></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style=""><table id="blogCalendar" class="Cal" title="Calendar" cellpadding="0" cellspacing="0">
	<tbody><tr><td colspan="7"><table class="CalTitle" cellspacing="0">
		<tbody><tr><td class="CalNextPrev"><a href="javascript:void(0);" onclick="loadBlogCalendar('2015/11/01');return false;">&lt;</a></td><td align="center">2015年12月</td><td class="CalNextPrev" align="right"><a href="javascript:void(0);" onclick="loadBlogCalendar('2016/01/01');return false;">&gt;</a></td></tr>
	</tbody></table></td></tr><tr><th class="CalDayHeader" abbr="日" scope="col" align="center">日</th><th class="CalDayHeader" abbr="一" scope="col" align="center">一</th><th class="CalDayHeader" abbr="二" scope="col" align="center">二</th><th class="CalDayHeader" abbr="三" scope="col" align="center">三</th><th class="CalDayHeader" abbr="四" scope="col" align="center">四</th><th class="CalDayHeader" abbr="五" scope="col" align="center">五</th><th class="CalDayHeader" abbr="六" scope="col" align="center">六</th></tr><tr><td class="CalOtherMonthDay" align="center">29</td><td class="CalOtherMonthDay" align="center">30</td><td align="center">1</td><td class="CalTodayDay" align="center">2</td><td align="center">3</td><td align="center">4</td><td class="CalWeekendDay" align="center">5</td></tr><tr><td class="CalWeekendDay" align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">10</td><td align="center">11</td><td class="CalWeekendDay" align="center">12</td></tr><tr><td class="CalWeekendDay" align="center">13</td><td align="center">14</td><td align="center">15</td><td align="center">16</td><td align="center">17</td><td align="center">18</td><td class="CalWeekendDay" align="center">19</td></tr><tr><td class="CalWeekendDay" align="center">20</td><td align="center">21</td><td align="center">22</td><td align="center">23</td><td align="center">24</td><td align="center">25</td><td class="CalWeekendDay" align="center">26</td></tr><tr><td class="CalWeekendDay" align="center">27</td><td align="center">28</td><td align="center">29</td><td align="center">30</td><td align="center">31</td><td class="CalOtherMonthDay" align="center">1</td><td class="CalOtherMonthDay" align="center">2</td></tr><tr><td class="CalOtherMonthDay" align="center">3</td><td class="CalOtherMonthDay" align="center">4</td><td class="CalOtherMonthDay" align="center">5</td><td class="CalOtherMonthDay" align="center">6</td><td class="CalOtherMonthDay" align="center">7</td><td class="CalOtherMonthDay" align="center">8</td><td class="CalOtherMonthDay" align="center">9</td></tr>
</tbody></table></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"><div id="sidebar_search" class="sidebar-block">
<div id="sidebar_search" class="mySearch">
<h3 class="catListTitle">搜索</h3>
<div id="sidebar_search_box">
<div id="widget_my_zzk" class="div_my_zzk"><input id="q" onkeydown="return zzk_go_enter(event);" class="input_my_zzk" type="text">&nbsp;<input onclick="zzk_go()" value="找找看" id="btnZzk" class="btn_my_zzk" type="button"></div>
<div id="widget_my_google" class="div_my_zzk"><input name="google_q" id="google_q" onkeydown="return google_go_enter(event)" class="input_my_zzk" type="text">&nbsp;<input onclick="google_go()" value="谷歌搜索" class="btn_my_zzk" type="button"></div>
</div>
</div>

</div><div id="sidebar_shortcut" class="sidebar-block">
<div class="catListLink">
<h3 class="catListTitle">常用链接</h3>
<ul>
<li><a href="http://www.cnblogs.com/vczero/p/" title="我的博客的随笔列表">我的随笔</a></li><li><a href="http://www.cnblogs.com/vczero/MyComments.html" title="我发表过的评论列表">我的评论</a></li><li><a href="http://www.cnblogs.com/vczero/OtherPosts.html" title="我评论过的随笔列表">我的参与</a></li><li><a href="http://www.cnblogs.com/vczero/RecentComments.html" title="我的博客的评论列表">最新评论</a></li><li><a href="http://www.cnblogs.com/vczero/tag/" title="我的博客的标签列表">我的标签</a></li>
<li><a id="itemListLink" onclick="this.blur();WarpClass('itemListLink', 'itemListLin_con');return false;" href="#">更多链接</a></li>
</ul>
<div id="itemListLin_con" style="display:none;">
<ul>

</ul>
</div>
</div></div><div id="sidebar_toptags" class="sidebar-block">
<div class="catListTag">
<h3 class="catListTitle">我的标签</h3>
<ul>
<li><a href="http://www.cnblogs.com/vczero/tag/react%20native/">react native</a>(8)</li><li><a href="http://www.cnblogs.com/vczero/tag/react/">react</a>(7)</li><li><a href="http://www.cnblogs.com/vczero/tag/react%20native%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/">react native入门指南</a>(7)</li><li><a href="http://www.cnblogs.com/vczero/tag/react-native/">react-native</a>(7)</li><li><a href="http://www.cnblogs.com/vczero/tag/react%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/">react入门指南</a>(7)</li><li><a href="http://www.cnblogs.com/vczero/tag/node.js/">node.js</a>(5)</li><li><a href="http://www.cnblogs.com/vczero/tag/leaflet%E5%BC%80%E6%BA%90/">leaflet开源</a>(3)</li><li><a href="http://www.cnblogs.com/vczero/tag/%E5%8E%9F%E7%94%9FJS/">原生JS</a>(3)</li><li><a href="http://www.cnblogs.com/vczero/tag/javascript/">javascript</a>(3)</li><li><a href="http://www.cnblogs.com/vczero/tag/javascript%E6%97%A5%E5%8E%86/">javascript日历</a>(3)</li><li><a href="http://www.cnblogs.com/vczero/tag/">更多</a></li>
</ul>
</div></div><div id="sidebar_categories">
<div id="sidebar_postcategory" class="catListPostCategory sidebar-block">
<h3 class="catListTitle">随笔分类<span style="font-size:11px;font-weight:normal">(40)</span></h3>

<ul>

<li><a id="CatList_LinkList_0_Link_0" href="http://www.cnblogs.com/vczero/category/602261.html">CSS(2)</a> </li>

<li><a id="CatList_LinkList_0_Link_1" href="http://www.cnblogs.com/vczero/category/601318.html">JavaScript(31)</a> </li>

<li><a id="CatList_LinkList_0_Link_2" href="http://www.cnblogs.com/vczero/category/601590.html">Node.js(7)</a> </li>

</ul>

</div>

<div id="sidebar_postarchive" class="catListPostArchive sidebar-block">
<h3 class="catListTitle">随笔档案<span style="font-size:11px;font-weight:normal">(34)</span></h3>

<ul>

<li><a id="CatList_LinkList_1_Link_0" href="http://www.cnblogs.com/vczero/archive/2015/07.html">2015年7月 (1)</a> </li>

<li><a id="CatList_LinkList_1_Link_1" href="http://www.cnblogs.com/vczero/archive/2015/06.html">2015年6月 (7)</a> </li>

<li><a id="CatList_LinkList_1_Link_2" href="http://www.cnblogs.com/vczero/archive/2015/04.html">2015年4月 (4)</a> </li>

<li><a id="CatList_LinkList_1_Link_3" href="http://www.cnblogs.com/vczero/archive/2015/01.html">2015年1月 (2)</a> </li>

<li><a id="CatList_LinkList_1_Link_4" href="http://www.cnblogs.com/vczero/archive/2014/12.html">2014年12月 (4)</a> </li>

<li><a id="CatList_LinkList_1_Link_5" href="http://www.cnblogs.com/vczero/archive/2014/11.html">2014年11月 (4)</a> </li>

<li><a id="CatList_LinkList_1_Link_6" href="http://www.cnblogs.com/vczero/archive/2014/10.html">2014年10月 (5)</a> </li>

<li><a id="CatList_LinkList_1_Link_7" href="http://www.cnblogs.com/vczero/archive/2014/09.html">2014年9月 (3)</a> </li>

<li><a id="CatList_LinkList_1_Link_8" href="http://www.cnblogs.com/vczero/archive/2014/08.html">2014年8月 (4)</a> </li>

</ul>

</div>

</div><div id="sidebar_recentcomments" class="sidebar-block"><div id="recent_comments_wrap">
<div class="catListComment">
<h3 class="catListTitle">最新评论</h3>

	<div id="RecentCommentsBlock"><ul>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/vczero/p/react-native8.html#3299237">1. Re:React Native开发的通讯录应用（使用JavaScript开发原生iOS应用，vczero）</a></li>
    <li class="recent_comment_body">里面嵌入了webview来呈现微博的哦，呵呵！</li>
    <li class="recent_comment_author">--RockyF</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/vczero/p/react-native.html#3294963">2. Re:React-Native入门指南（一）——环境配置 &amp; Hello World</a></li>
    <li class="recent_comment_body">楼主，我一直卡在react-native init HelloWorld，然后就不动了，是怎么回事？你遇到过吗？</li>
    <li class="recent_comment_author">--zhangteng</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/vczero/p/tuban_1.html#3281207">3. Re:AngularJS + Node.js + MongoDB开发的基于位置的通讯录(by vczero)</a></li>
    <li class="recent_comment_body">安庆人路过。。。</li>
    <li class="recent_comment_author">--Aralic</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/vczero/p/angular_1.html#3238470">4. Re:爱搜索，爱生活，基于豆瓣API &amp; Angular开发的web App（by vczero）</a></li>
    <li class="recent_comment_body">你好，请问用什么开发工具开发？</li>
    <li class="recent_comment_author">--像一句广告</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/vczero/p/react-native8.html#3233263">5. Re:React Native开发的通讯录应用（使用JavaScript开发原生iOS应用，vczero）</a></li>
    <li class="recent_comment_body">确认不错，身为前端开发者，感觉略吊~~</li>
    <li class="recent_comment_author">--赵小磊</li>
</ul>
</div>
</div>
</div></div><div id="sidebar_topviewedposts" class="sidebar-block"><div id="topview_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">阅读排行榜</h3>
	<div id="TopViewPostsBlock"><ul><li><a href="http://www.cnblogs.com/vczero/p/sum2014.html">1. 写给过去5年，总结2014，拥抱2015(5164)</a></li><li><a href="http://www.cnblogs.com/vczero/p/BE_FE.html">2. 从.NET到Node.js谈前后端分离实践（by vczero）(2581)</a></li><li><a href="http://www.cnblogs.com/vczero/p/tuban_1.html">3. AngularJS + Node.js + MongoDB开发的基于位置的通讯录(by vczero)(1894)</a></li><li><a href="http://www.cnblogs.com/vczero/p/leaflet_1.html">4. leaflet开源地图库源码研读（一）——简介&amp;Demo初体验(by vczero)(1837)</a></li><li><a href="http://www.cnblogs.com/vczero/p/leaflet_2.html">5. leaflet开源地图库源码研读（二）——整体框架(by vczero)(1611)</a></li></ul></div>
</div>
</div></div><div id="sidebar_topcommentedposts" class="sidebar-block"><div id="topfeedback_posts_wrap">
<div class="catListFeedback">
<h3 class="catListTitle">评论排行榜</h3>
	<div id="TopFeedbackPostsBlock"><ul><li><a href="http://www.cnblogs.com/vczero/p/sum2014.html">1. 写给过去5年，总结2014，拥抱2015(73)</a></li><li><a href="http://www.cnblogs.com/vczero/p/BE_FE.html">2. 从.NET到Node.js谈前后端分离实践（by vczero）(17)</a></li><li><a href="http://www.cnblogs.com/vczero/p/tuban_1.html">3. AngularJS + Node.js + MongoDB开发的基于位置的通讯录(by vczero)(11)</a></li><li><a href="http://www.cnblogs.com/vczero/p/mvc_1.html">4. 构建基础的JavaScript MVC（一）(7)</a></li><li><a href="http://www.cnblogs.com/vczero/p/js_ui_3.html">5. javascript动手写日历组件(3)——内存和性能优化（by vczero）(7)</a></li></ul></div>
</div>
</div></div><div id="sidebar_topdiggedposts" class="sidebar-block"><div id="topdigg_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">推荐排行榜</h3>
<div id="TopDiggPostsBlock"><ul><li><a href="http://www.cnblogs.com/vczero/p/sum2014.html">1. 写给过去5年，总结2014，拥抱2015(32)</a></li><li><a href="http://www.cnblogs.com/vczero/p/BE_FE.html">2. 从.NET到Node.js谈前后端分离实践（by vczero）(11)</a></li><li><a href="http://www.cnblogs.com/vczero/p/angular_1.html">3. 爱搜索，爱生活，基于豆瓣API &amp; Angular开发的web App（by vczero）(7)</a></li><li><a href="http://www.cnblogs.com/vczero/p/openapi_js.html">4. 高德地图JS-API公开课视频教程(7)</a></li><li><a href="http://www.cnblogs.com/vczero/p/cookie.html">5. 更加方便的操作cookie——cookie封装 (by vczero)(5)</a></li></ul></div>
</div></div></div></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright ©2015 'vczero
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


</body></html>