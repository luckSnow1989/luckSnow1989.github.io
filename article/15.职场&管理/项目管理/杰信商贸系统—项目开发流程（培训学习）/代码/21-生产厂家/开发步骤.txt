1、功能描述

   维护公司产品的生产厂家信息。信息可进行添加，修改。由管理员进行日常的维护。


2、数据库结构

FACTORY_ID	FACTORY_ID	varchar(40)
厂家全称	FULL_NAME	varchar(200)
名称缩写	FACTORY_NAME	varchar(50)
联系人		CONTACTOR	varchar(30)	30
电话		PHONE		varchar(20)	20
手机		MOBILE		varchar(20)	20
传真		FAX		varchar(20)	20
说明		CNOTE		text
类型		CTYPE		int
状态		STATE		char(1)	1	0停止1启用
验货员		INSPECTOR	varchar(30)
排序号		ORDER_NO	int
创建人		CREATE_BY	varchar(40)
创建部门	CREATE_DEPT	varchar(40)
创建日期	CREATE_TIME	datetime



3、实现业务

开发步骤：
1）建表 
2）编写	cn.itcast.entity	Factory.hbm.xml
3）编写	cn.itcast.entity	Factory.java
4）编写dao	cn.itcast.entity.dao	FactoryDAO.java
5）在hibernate.cfg.xml中声明
6）在beans.xml中声明
7）创建列表页面	jFactoryList.jsp
8）创建ACTION	cn.itcast.web.struts2.basicinfo.factory		FactoryAction.java
9）创建	struts-basicinfo.xml
10）入口链接	left.jsp
11）插入厂家信息表`factory_c`测试数据
12）action 转向页面方法
13）action 增加、修改方法、页面
14）action 删除方法、页面
15）action 改变状态

		
1）建表

DROP TABLE IF EXISTS FACTORY_C;

/*==============================================================*/
/* Table: FACTORY_C                                             */
/*==============================================================*/
CREATE TABLE FACTORY_C
(
   FACTORY_ID           VARCHAR(40) NOT NULL,
   FULL_NAME            VARCHAR(200),
   FACTORY_NAME         VARCHAR(50),
   CONTACTOR            VARCHAR(30),
   PHONE                VARCHAR(20),
   MOBILE               VARCHAR(20),
   FAX                  VARCHAR(20),
   CNOTE                TEXT,
   CTYPE                INT COMMENT 'SYS_CODE_B 0103',
   STATE                CHAR(1) COMMENT '1正常2停止',
   INSPECTOR            VARCHAR(30),
   ORDER_NO             INT COMMENT '
            ',
   CREATE_BY            VARCHAR(40),
   CREATE_DEPT          VARCHAR(40),
   CREATE_TIME          DATETIME,
   PRIMARY KEY (FACTORY_ID)
);


2）编写	cn.itcast.entity	Factory.hbm.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="cn.itcast.entity">
	<class name="Factory" table="FACTORY_C">
		<id name="id" type="string" column="FACTORY_ID">
			<generator class="uuid"></generator>
		</id>
		
		<property name="fullName" type="string" column="FULL_NAME"/>
		<property name="factoryName" type="string" column="FACTORY_NAME"/>
		<property name="contactor" type="string" column="CONTACTOR"/>
		<property name="phone" type="string" column="PHONE"/>
		<property name="mobile" type="string" column="MOBILE"/>		
		<property name="fax" type="string" column="FAX"/>
		<property name="cnote" type="string" column="CNOTE"/>
		
		<property name="ctype" type="integer" column="CTYPE"/>
		<property name="typeName" type="string" formula="(SELECT t.name FROM sys_code_b t WHERE t.order_no=ctype and t.parent_id='0103')" insert="false" update="false"></property>
		<property name="inspector" type="string" column="INSPECTOR"/>
		<property name="state" type="string" column="STATE"/>
		<property name="orderNo" type="integer" column="ORDER_NO"/>
		
		<property name="createBy" type="string" column="CREATE_BY"/>
		<property name="createDept" type="string" column="CREATE_DEPT"/>
		<property name="createTime" type="timestamp" column="CREATE_TIME"/>
	</class>
</hibernate-mapping>

3）编写	cn.itcast.entity	Factory.java

public class Factory implements Serializable{
	   private String id;
	   private String fullName;
	   private String factoryName;
	   private String contactor;
	   private String typeName;
	   private String phone;
	   private String mobile;
	   private String fax;
	   private String cnote;
	   private Integer ctype;
	   private String state;
	   private String inspector;
	   private Integer orderNo;

	   private String createBy;
	   private String createDept;
	   private Date createTime;	   
}

4）编写dao	cn.itcast.entity.dao	FactoryDAO.java

public class FactoryDAO extends _RootDAO {

}

5）在hibernate.cfg.xml中声明

<mapping resource="cn/itcast/entity/Factory.hbm.xml" />


6）在beans.xml中声明

<bean id="daoFactory" class="cn.itcast.entity.dao.FactoryDAO" autowire="byName"/>

7）创建列表页面	jFactoryList.jsp

8）创建ACTION	cn.itcast.web.struts2.basicinfo.factory		FactoryAction.java

public class FactoryAction extends _BaseStruts2Action implements ModelDriven<Factory> {
	private Factory model = new Factory();

	public Factory getModel() {
		return model;
	}

	public String list() {
		FactoryDAO oDao = (FactoryDAO) this.getDao("daoFactory");
		List dataList = oDao.find("from Factory o");
		ActionContext.getContext().put("dataList", dataList);

		return "plist";
	}


9）创建	struts-basicinfo.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.1.7//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">

<struts>
  	<package name="factory" namespace="/basicinfo" extends="struts-default">
  		<action name="factoryAction_*" method="{1}" class="cn.itcast.web.struts2.basicinfo.factory.FactoryAction">
  			<result name="plist">/basicinfo/factory/jFactoryList.jsp</result>
  			<result name="pcreate">/basicinfo/factory/jFactoryCreate.jsp</result>
  			<result name="pupdate">/basicinfo/factory/jFactoryUpdate.jsp</result>
  			<result name="pview">/basicinfo/factory/jFactoryView.jsp</result>
  		</action>
  	</package>
</struts>


10）入口链接	left.jsp


11）插入厂家信息表`factory_c`测试数据


12）action 转向页面方法

	public String tocreate() {
		return "pcreate";
	}

	public String toupdate() {
		FactoryDAO oDao = (FactoryDAO) this.getDao("daoFactory");
		Factory obj = (Factory)oDao.get(Factory.class, model.getId());
		ActionContext.getContext().getValueStack().push(obj);
		
		return "pupdate";
	}
	
	public String toview() {
		FactoryDAO oDao = (FactoryDAO) this.getDao("daoFactory");
		Factory obj = (Factory)oDao.get(Factory.class, model.getId());
		ActionContext.getContext().getValueStack().push(obj);
		
		return "pview";
	}

13）action 增加、修改方法、页面

	
	public String save(){
		FactoryDAO oDao = (FactoryDAO) this.getDao("daoFactory");
		oDao.saveOrUpdate(model);
		
		return list();
	}

14）action 删除方法、页面

	
	public String delete(){
		HttpServletRequest request = ServletActionContext.getRequest();
		String[] ids = request.getParameterValues("id");
		
		if(ids!=null&&ids.length>0){
			FactoryDAO oDao = (FactoryDAO) this.getDao("daoFactory");
			oDao.deleteAllById(ids, Factory.class);
		}
		
		return list();
	}

15）action 改变状态

	private void state(String value){
		HttpServletRequest request = ServletActionContext.getRequest();
		String[] ids = request.getParameterValues("id");
		
		if(ids!=null&&ids.length>0){
			FactoryDAO oDao = (FactoryDAO) this.getDao("daoFactory");
			Factory obj = null;
			Set oSet = new HashSet();
			for(int i=0;i<ids.length;i++){
				obj = (Factory)oDao.get(Factory.class, ids[i]);
				obj.setState(value);
				oSet.add(obj);
			}
			oDao.saveOrUpdateAll(oSet);
		}
	}
	
	public String begin(){
		state("1");
		return list();
	}
	
	public String stop(){
		state("2");
		return list();
	}



