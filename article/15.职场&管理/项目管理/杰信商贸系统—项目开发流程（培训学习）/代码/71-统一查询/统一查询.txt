功能：
实现简单的统一查询方式，类似google方式自动拼接多个条件，也可以指定某个具体的字段。

新业务只需拷贝整段代码，然后修改2个数组对应的业务字段即可实现。


缺点：目前只支持字符串类型字段，其他类型字段还需手工编写代码。

例如日期字段就需要“开始时间”“结束时间”，没法直接用一个下拉框实现。

注意：为了和业务字段区分，查询条件控件都用 f_开头。
同时，这样做方便利用js清空各输入框内容。（清空查询条件）


== 改造 _BaseStruts2Action 增加属性

public class _BaseStruts2Action extends ActionSupport {
	public Object getDao(String dao){
		
		return AppContext.getInstance().getAppContext().getBean(dao);
	}
	
	//统一查询框架
	public String f_conditionStr;			//拼接的查询条件
	public String f_type;				//下拉框当前值
	public String comboContentStr;			//下拉框option串
	
	public String getF_conditionStr() {
		return f_conditionStr;
	}
	public void setF_conditionStr(String fConditionStr) {
		f_conditionStr = fConditionStr;
	}
	public String getF_type() {
		return f_type;
	}
	public void setF_type(String fType) {
		f_type = fType;
	}
	public String getComboContentStr() {
		return comboContentStr;
	}
	public void setComboContentStr(String comboContentStr) {
		this.comboContentStr = comboContentStr;
	}
}

== 改造 _RootDAO.java

	/*
	 * 统一查询框架  by tony 
	 * who 哪个业务对象
	 * pValue 下拉框的值 <option value="pValue">pText</option>
	 * pText  下拉框的文字
	 * dlValue 下拉框选中的值
	 * curValue 用户输入的查询值
	 * otherCondition 其他条件
	 */
	
	public List dataList(String who, String[] pValue, String[] pText, String dlValue, String curValue, String otherCondition){
		
		UtilFuns utilFuns = new UtilFuns();
		String[] aConditionStr = utilFuns.splitFindStr(curValue);		//规整分隔符，支持空格、逗号、中文件逗号

		StringBuffer hql = new StringBuffer();
		hql.append("from ").append(who).append(" o where 1=1");
		
		List paraList = new ArrayList();
		int j=0;j=0;
		
		//进行模糊查询，类似google的处理
		if (UtilFuns.isNotEmpty(curValue)) {
			for(int i=0;i<aConditionStr.length;i++){
				if (UtilFuns.isNotEmpty(dlValue)) {
					hql.append(" and o.").append(dlValue).append(" like ?");
					paraList.add("%" + aConditionStr[i] + "%");
				}else{
					hql.append(" and (");
					for(j=0;j<pValue.length;j++){
						hql.append("o.").append(pValue[j]).append(" like ? or ");
						paraList.add("%" + aConditionStr[i] + "%");
					}
					hql.delete(hql.length()-3, hql.length());	//del last ' or'
					hql.append(")");
				}
			}
		}
		
		hql.append(otherCondition);
		
		return this.find(hql.toString() + otherCondition, paraList.toArray());		//返回查询结果
	}



使用：


== action中代码：
	
	
	
	public String list(){
		ContractDAO oDao = (ContractDAO) this.getDao("daoContract");
		UtilFuns utilFuns = new UtilFuns();
		
		String[] pValue = {"contractNo","customName","inputBy","inspector"};
		String[] pText = {"合同号","客户名称","制单人","验货员"};
		
		//传递到页面的查询参数
		comboContentStr = utilFuns.ComboList(f_type, pValue, pText);		//构造下拉框option
		ActionContext.getContext().put("dataList", oDao.dataList("Contract", pValue, pText, f_type, f_conditionStr));
		
		return "plist";
	}


== jsp中代码： 查询条
	
<span class="noprint">
<div id="find_div" style="width:98%;">
<fieldset>
<legend><font color="000">查询条件&nbsp;</font></legend>
<div style="width:98%;padding-top:7px;text-align:left;">
 
类型：
<select name="f_type" style="width:130px;heigh:30px;">
${comboContentStr}
</select>
 
内容：	            	
<input type="text" name="f_conditionStr" value="${f_conditionStr}" size="30"
	onFocus="this.select();"
	onKeyDown="javascript:if(event.keyCode==13){ document.getElementById('btnFind').onclick(); }"
/>
 
<input id="btnFind" type="button" name="btnFind" value="查询" onclick="formSubmit('/contract/contractAction_list','_self');this.blur();">
<input type="button" name="btnReset" value="清空" onclick="findReset();this.blur();">
 
</div>
</fieldset>
</div>
</span>

