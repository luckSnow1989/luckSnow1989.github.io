一、介绍	
	文档类型定义（DTD， document type definition）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。
DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用

二、DOCTYPE
	1.内部的DOCTYPE，即定义在XML内部的约束，格式：<!DOCTYPE 根元素 [元素声明]>
	例如：
		<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE students [
			<!ELEMENT studnets 	(student*)>
			<!ELEMENT studnet 	(id,name)>
			<!ELEMENT id 		(#PCDATA)>
			<!ELEMENT name 		(#PCDATA)>
		]>
		<students>
			<student>
				<id>no.1</id>
				<name>张雪</name>
			</student>
		</students>
		
	2.外部文档声明
	假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中。
		(1).dtd为本地文件<!DOCTYPE 根元素 SYSTEM "dtd文件的相对或绝对路径">
			<!DOCTYPE students SYSTEM "D:\\studnets.dtd">
			
		(2).dtd为网络公共资源<!DOCTYPE students PUBLIC "资源名称" "网路路径">
			<!DOCTYPE hibernate-configuration PUBLIC
				"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
				"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
	
三、dtd组成元素
	1.元素,HTML元素的例子是 "body" 和 "table"。XML元素的例子是 "note" 和 "message"。元素可包含文本、其他元素或者是空的。
		空的HTML元素的例子是"hr"、"br"以及"img"。
	
	2.属性,属性总是被置于某元素的开始标签中。属性总是以名称/值的形式成对出现的。下面的 "img" 元素拥有关于源文件的额外信息
		<img src="computer.gif" />
	
	3.实体,实体是用来定义普通文本的变量。实体引用是对实体的引用。大多数同学都了解这个 HTML 实体引用："&nbsp;"。
		这个“无折行空格”实体在 HTML 中被用于在某个文档中插入一个额外的空格。当文档被 XML 解析器解析时，实体就会被展开。	
		实体引用 		字符 
		&lt; 		< 
		&gt; 		> 
		&amp;		& 
		&quot; 		" 
		&apos; 		' 
	
	4.PCDATA, 意思是被解析的字符数据（parsed character data）。可把字符数据想象为 XML 元素的开始标签与结束标签之间的文本。
		PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。
		文本中的标签会被当作标记来处理，而实体会被展开。
		不过，被解析的字符数据不应当包含任何 &、< 或者 > 字符；需要使用 &amp;、&lt; 以及 &gt; 实体来分别替换它们。
	
	5.CDATA
		CDATA的意思是字符数据（character data）。
		CDATA是不会被解析器解析的文本。在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。
		
四、DTD - 元素
	格式：<!ELEMENT 元素名称 类别>或<!ELEMENT 元素名称 (元素内容)>
	
	1.空元素	<!ELEMENT 元素名称 EMPTY>		
		例如：dtd:<!ELEMENT br EMPTY>,xml:<br />
	
	2.只有 PCDATA 的元素，只有 PCDATA 的元素通过圆括号中的 #PCDATA 进行声明：
		格式：<!ELEMENT 元素名称 (#PCDATA)>
	
	3.带有任何内容的元素，通过类别关键词 ANY 声明的元素，可包含任何可解析数据的组合：
		格式：<!ELEMENT 元素名称 ANY>
	
	4.带有子元素（序列）的元素，带有一个或多个子元素的元素通过圆括号中的子元素名进行声明：
		格式	:<!ELEMENT 元素名称 (子元素名称 1)>或<!ELEMENT 元素名称 (子元素名称 1,子元素名称 2,.....)>
	
	5.声明只出现一次的元素，格式<!ELEMENT 元素名称 (子元素名称)>
		例如：<!ELEMENT note (message)>，上面的例子声明了：message 子元素必须出现一次，并且必须只在 "note" 元素中出现一次。
	
	6.声明最少出现一次的元素，格式：<!ELEMENT 元素名称 (子元素名称+)>子元素最少出现一次
	
	7.声明出现零次或多次的元素，格式：<!ELEMENT 元素名称 (子元素名称*)>子元素出现零次或多次。
		
	8.声明出现零次或一次的元素，格式：<!ELEMENT 元素名称 (子元素名称?)>子元素出现零次或1次。
	
	9.声明“非.../既...”类型的内容，格式<!ELEMENT note (to,from,header,(message|body))>
	
	10.声明混合型的内容，<!ELEMENT note (#PCDATA|to|from|header|message)*>	
	
五、DTD - 属性
	1.声明属性	
		格式：<!ATTLIST 元素名称 属性名称 属性类型 默认值>
		例如：dtd:<!ATTLIST studnet id CDATA "stu001">,xml:<studnet id="stu001" />
	
	2.属性类型的选项：
		类型 			描述 
		CDATA 			值为字符数据 (character data) 
		(en1|en2|..) 	此值是枚举列表中的一个值 
		ID 				值为唯一的 id 
		IDREF 			值为另外一个元素的 id 
		IDREFS 			值为其他 id 的列表 
		NMTOKEN 		值为合法的 XML 名称 
		NMTOKENS 		值为合法的 XML 名称的列表 
		ENTITY 			值是一个实体 
		ENTITIES 		值是一个实体列表 
		NOTATION 		此值是符号的名称 
		xml: 			值是一个预定义的 XML 值 
	
	3.默认值参数可使用下列值：
		值 				解释 
		值 				属性的默认值 
		#REQUIRED 		属性值是必需的 
		#IMPLIED 		属性不是必需的 
		#FIXED value 	属性值是固定的 
		
	4.常用用法
		(1)规定一个默认的属性值
			例如：<!ELEMENT square EMPTY>
				<!ATTLIST square width CDATA "0">
				<square width="100" />
		
		(2)#IMPLIED,格式：<!ATTLIST 元素名称 属性名称 属性类型 #IMPLIED>
			例如：<!ATTLIST contact fax CDATA #IMPLIED>
				  <contact fax="555-667788" />或<contact />
		
		(3)#REQUIRED，格式：<!ATTLIST 元素名称 属性名称 属性类型 #REQUIRED>
			例如：<!ATTLIST person number CDATA #REQUIRED>
			     <person number="5677" />
		
		(4)#FIXED，格式：<!ATTLIST 元素名称 属性名称 属性类型 #FIXED "value">
			例如：<!ATTLIST sender company CDATA #FIXED "Microsoft">
				 <sender company="Microsoft" />
		
		(5)列举属性值，格式：<!ATTLIST 元素名称 属性名称 (en1|en2|..) 默认值>
			例如：<!ATTLIST payment type (check|cash) "cash">
				 <payment type="check" />或<payment type="cash" />
	
六、DTD - 实体
	实体是用于定义用于定义引用普通文本或特殊字符的快捷方式的变量。
	实体引用是对实体的引用。
	实体可在内部或外部进行声明。
	1.内部实体声明
	语法：<!ENTITY 实体名称 "实体的值">例子：
	例子：<!ENTITY writer "Bill Gates">
		 <!ENTITY copyright "Copyright W3School.com.cn">XML 例子:
		 <author>&writer;&copyright;</author>
		 注释: 一个实体由三部分构成: 一个和号 (&), 一个实体名称, 以及一个分号 (;)。
	
	2.外部实体声明
	语法：<!ENTITY 实体名称 SYSTEM "URI/URL">例子：
	例子：<!ENTITY writer SYSTEM "http://www.w3school.com.cn/dtd/entities.dtd">
		 <!ENTITY copyright SYSTEM "http://www.w3school.com.cn/dtd/entities.dtd">XML 例子:
		 <author>&writer;&copyright;</author>

七.dtd验证
	1.通过 XML 解析器进行验证,只能使用IE浏览器
	当您试图打开某个 XML 文档时，XML 解析器有可能会产生错误。通过访问 parseError对象，就可以取回引起错误的确切代码、文本甚至所在的行。
	注释：load( ) 方法用于文件，而 loadXML( ) 方法用于字符串。
	
		var xmlDoc = new ActiveXObject("Microsoft.XMLDOM")
		xmlDoc.async="false"
		xmlDoc.validateOnParse="true"
		xmlDoc.load("note_dtd_error.xml")
		
		document.write("<br>Error Code: ")
		document.write(xmlDoc.parseError.errorCode)
		document.write("<br>Error Reason: ")
		document.write(xmlDoc.parseError.reason)
		document.write("<br>Error Line: ")
		document.write(xmlDoc.parseError.line)
	
	2.关闭验证
		通过把 XML 解析器的 validateOnParse 设置为 "false"，就可以关闭验证。
		var xmlDoc = new ActiveXObject("Microsoft.XMLDOM")
		xmlDoc.async="false"
		xmlDoc.validateOnParse="false"
		xmlDoc.load("note_dtd_error.xml")
		
		document.write("<br>Error Code: ")
		document.write(xmlDoc.parseError.errorCode)
		document.write("<br>Error Reason: ")
		document.write(xmlDoc.parseError.reason)
		document.write("<br>Error Line: ")
		document.write(xmlDoc.parseError.line)

八、DTD - 来自网络的实例
	1.电视节目表 DTD
		<!DOCTYPE TVSCHEDULE [
		<!ELEMENT TVSCHEDULE (CHANNEL+)>
		<!ELEMENT CHANNEL (BANNER,DAY+)>
		<!ELEMENT BANNER (#PCDATA)>
		<!ELEMENT DAY (DATE,(HOLIDAY|PROGRAMSLOT+)+)>
		<!ELEMENT HOLIDAY (#PCDATA)>
		<!ELEMENT DATE (#PCDATA)>
		<!ELEMENT PROGRAMSLOT (TIME,TITLE,DESCRIPTION?)>
		<!ELEMENT TIME (#PCDATA)>
		<!ELEMENT TITLE (#PCDATA)> 
		<!ELEMENT DESCRIPTION (#PCDATA)>
		<!ATTLIST TVSCHEDULE NAME CDATA #REQUIRED>
		<!ATTLIST CHANNEL CHAN CDATA #REQUIRED>
		<!ATTLIST PROGRAMSLOT VTR CDATA #IMPLIED>
		<!ATTLIST TITLE RATING CDATA #IMPLIED>
		<!ATTLIST TITLE LANGUAGE CDATA #IMPLIED>
		]>
	2.hibernate
		<!ELEMENT hibernate-configuration (session-factory,security?)>
		
		<!ELEMENT property (#PCDATA)>
		<!ATTLIST property name CDATA #REQUIRED>
		
		<!ELEMENT mapping EMPTY> <!-- reference to a mapping file -->
		<!ATTLIST mapping resource CDATA #IMPLIED>
		<!ATTLIST mapping file CDATA #IMPLIED>
		<!ATTLIST mapping jar CDATA #IMPLIED>
		<!ATTLIST mapping package CDATA #IMPLIED>
		<!ATTLIST mapping class CDATA #IMPLIED>
		
		<!ELEMENT class-cache EMPTY>
		<!ATTLIST class-cache class CDATA #REQUIRED>
		<!ATTLIST class-cache region CDATA #IMPLIED>
		<!ATTLIST class-cache usage (read-only|read-write|nonstrict-read-write|transactional) #REQUIRED>
		<!ATTLIST class-cache include (all|non-lazy) "all">
		
		<!ELEMENT collection-cache EMPTY>
		<!ATTLIST collection-cache collection CDATA #REQUIRED>
		<!ATTLIST collection-cache region CDATA #IMPLIED>
		<!ATTLIST collection-cache usage (read-only|read-write|nonstrict-read-write|transactional) #REQUIRED>
		
		<!ELEMENT event (listener*)>
		<!ATTLIST event type (auto-flush|merge|create|create-onflush|delete|dirty-check|evict|flush|flush-entity|load|load-collection|lock|refresh|replicate|save-update|save|update|pre-load|pre-update|pre-insert|pre-delete|pre-collection-recreate|pre-collection-remove|pre-collection-update|post-load|post-update|post-insert|post-delete|post-collection-recreate|post-collection-remove|post-collection-update|post-commit-update|post-commit-insert|post-commit-delete) #REQUIRED>
		
		<!ELEMENT listener EMPTY>
		<!ATTLIST listener type (auto-flush|merge|create|create-onflush|delete|dirty-check|evict|flush|flush-entity|load|load-collection|lock|refresh|replicate|save-update|save|update|pre-load|pre-update|pre-insert|pre-delete|pre-collection-recreate|pre-collection-remove|pre-collection-update|post-load|post-update|post-insert|post-delete|post-collection-recreate|post-collection-remove|post-collection-update|post-commit-update|post-commit-insert|post-commit-delete) #IMPLIED>
		<!ATTLIST listener class CDATA #REQUIRED>
		
		<!ELEMENT session-factory (property*, mapping*, (class-cache|collection-cache)*, event*, listener*)>
		<!ATTLIST session-factory name CDATA #IMPLIED> <!-- the JNDI name -->
		
		<!ELEMENT security (grant*)>
		<!ATTLIST security context CDATA #REQUIRED> <!--the JACC contextID-->
		
		<!ELEMENT grant EMPTY>
		<!ATTLIST grant role CDATA #REQUIRED>
		<!ATTLIST grant entity-name CDATA #REQUIRED>
		<!ATTLIST grant actions CDATA #REQUIRED>





	
