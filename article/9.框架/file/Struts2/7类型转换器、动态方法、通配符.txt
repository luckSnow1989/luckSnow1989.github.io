一、自定义类型转换器
	1、编写一个类，继承com.opensymphony.xwork2.conversion.impl.DefaultTypeConverter
	2、覆盖掉其中的public Object convertValue(Map<String, Object> context, Object value,Class toType)
			context:OGNL表达式的上下文
			value:实际的值。用户输入的都是字符串，但他是一个String数组。
			toType：目标类型
	public class DateConvertor extends DefaultTypeConverter {
		/*
		 context:ognl表达式的上下文
		 value：用户输入的值（ 保存数据时）或者模型中的属性。用户输入的值是String数组
		 toType:目标类型
		 */
		@Override
		public Object convertValue(Map<String, Object> context, Object value, Class toType) {
			DateFormat df = new SimpleDateFormat("yyyy/MM/dd");
			if(toType==Date.class){
				//2013/05/31----->java.util.Date 保存数据时
				String strValue = ((String[])value)[0];
				try {
					return df.parse(strValue);
				} catch (ParseException e) {
					throw new RuntimeException(e);
				}
			}else{
				//java.util.Date----->2013/05/31 获取数据时
				Date dValue = (Date)value;
				return df.format(dValue);
			}
		}
	}
	3、注册类型转换器
		3.1局部类型转换器：只对当前的Action有效
			具体做法：在动作类相同的包中，建立一个名称是“动作类名-conversion.properties”的配置文件，
			文件中增加以下内容：要验证的字段=验证器的类全名
					birthday=cn.itcast.convertor.DateConvertor
		3.2全局类型转换器：对所有的Action都有效
		具体做法：在WEB-INF/classes目录下，建立一个名称为"xwork-conversion.properties"的配置文件，
			文件中增加以下内容：目标类型全名=验证器的类全名
					java.util.Date=cn.itcast.convertor.DateConvertor
		
	注意：如果转换失败，Struts2框架会寻找name=input的结果页面

二、动态方法，这个在实际中是不建议使用的。
	在一个action中，会有多个方法时，可以使用“/user/login!方法名.action”，调用
	<!-- 是否支持动态方法调用，默认是true -->
	<constant name="struts.enable.DynamicMethodInvocation" value="true"></constant>

三、通配符，方法名，指向的页面等，开发中常使用
	可以使用“/user_add”，即可访问这个action，
	<action name="user_*" class="com.zx.action.UserAction" method="{1}">
		<result name="success" type="dispatcher">/{1}.jsp</result>
 	</action>
 	
 	
 	

	
三、用户输入数据的验证
	1、手工编程验证，针对该动作类中的所有的动作方法
	步骤：
	a、动作类继承ActionSupport
	b、覆盖调用public void validate()方法
	c、在validate方法中，编写不符合要求的代码判断，并调用父类的addFieldError(String fieldName,String errorMessage)
		如果fieldError（存放错误信息的Map）有任何的元素，就是验证不通过，动作方法不会执行。
		Struts2框架会返回到name=input的result
	d、在name=input指定的页面上使用struts2的标签显示错误信息。<s:fielderror/>
	
	